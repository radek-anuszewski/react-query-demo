{"version":3,"sources":["App.js","serviceWorkerRegistration.js","index.js"],"names":["defaultOptions","refetchOnWindowFocus","AddPost","useState","author","title","message","post","setPost","queryClient","useQueryClient","useMutation","comment","fetch","method","body","JSON","stringify","onSuccess","invalidateQueries","exact","mutate","isSuccess","reset","createOnChange","key","e","target","value","onSubmit","preventDefault","placeholder","onChange","type","Post","showComments","setShowComments","style","border","padding","onClick","postId","id","Comments","useQuery","a","response","json","comments","isFetching","data","map","margin","AddComment","setComment","App","posts","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","controller","reload","onupdatefound","installingWorker","installing","onstatechange","state","console","log","onUpdate","catch","error","client","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","document","getElementById","URL","process","href","origin","addEventListener","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c6ca929e.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {useMutation, useQuery, useQueryClient} from \"react-query\";\n\nconst defaultOptions = { refetchOnWindowFocus: false };\n\nconst App = () => {\n  const { isFetching, data } = useQuery('posts', async () => {\n    const response = await fetch('apis');\n    const { posts } = await response.json();\n    return posts;\n  }, defaultOptions);\n\n  return (\n      <>\n        <h3>Posts:</h3>\n        {isFetching && 'Loading posts...'}\n        {data?.map(post => <Post key={post.id} post={post} />)}\n        <AddPost />\n      </>\n  );\n}\n\nconst AddPost = () => {\n  const [post, setPost] = useState({ author: '', title: '', message: ''})\n\n  const queryClient = useQueryClient();\n\n  const { mutate, isSuccess, reset } = useMutation(comment => (\n    fetch(`apis/add`, {\n      method: 'POST',\n      body: JSON.stringify(post),\n    })\n  ), {\n    onSuccess: () => {\n      queryClient.invalidateQueries('posts', {exact: true});\n    }\n  });\n\n  const createOnChange = key => e => {\n    if (isSuccess) {\n      reset();\n    }\n    setPost(post => ({...post, [key]: e.target.value}));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    mutate(post);\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input placeholder=\"Author\" value={post.author} onChange={createOnChange('author')} />\n      <input placeholder=\"Title\" value={post.title} onChange={createOnChange('title')} />\n      <input placeholder=\"Message\" value={post.message} onChange={createOnChange('message')} />\n      <button type=\"submit\">Add comment</button>\n      <br />\n      {isSuccess && 'post Successfully sent'}\n    </form>\n  );\n}\n\nconst Post = ({ post }) => {\n  const [showComments, setShowComments] = useState(false);\n\n  return (\n    <p key={post.id} style={{border: '1px solid red', padding: '4px'}}>\n      <h4>{post.title}, <small>{post.author}</small></h4>\n      <div>{post.message}</div>\n      {!showComments && <button onClick={() => setShowComments(true)}>Show comments</button>}\n      {showComments && <button onClick={() => setShowComments(false)}>Hide comments</button>}\n      {showComments && <Comments postId={post.id} />}\n    </p>\n  )\n}\n\nconst Comments = ({ postId }) => {\n  const { isFetching, data } = useQuery(['comments', postId], async () => {\n    const response = await fetch(`apis/comments/${postId}`);\n    const { comments } = await response.json();\n    return comments;\n  }, defaultOptions);\n\n  return (\n    <>\n      <h5>Comments</h5>\n      {isFetching && 'Loading comments...'}\n      {data?.map(comment => (\n          <div key={comment.id} style={{border: '3px solid green', margin: '4px', padding: '4px'}}>\n            <h6>{comment.author}</h6>\n            <div>{comment.message}</div>\n          </div>\n        )\n      )}\n      <AddComment postId={postId} />\n    </>\n  )\n}\n\nconst AddComment = ({ postId }) => {\n  const [comment, setComment] = useState({ author: '', message: '' });\n\n  const queryClient = useQueryClient();\n\n  const { mutate, isSuccess, reset } = useMutation(['comments', postId], comment => (\n    fetch(`apis/comments/add/${postId}`, {\n      method: 'POST',\n      body: JSON.stringify(comment),\n    })\n  ), {\n    onSuccess: () => {\n      queryClient.invalidateQueries(['comments', postId], {exact: true});\n    }\n  });\n\n  const createOnChange = key => e => {\n    if (isSuccess) {\n      reset();\n    }\n    setComment(comment => ({...comment, [key]: e.target.value}));\n  }\n\n  return (\n    <form onSubmit={e => {\n      e.preventDefault();\n      mutate(comment);\n    }}>\n      <input placeholder=\"Author\" value={comment.author} onChange={createOnChange('author')} />\n      <input placeholder=\"Message\" value={comment.message} onChange={createOnChange('message')} />\n      <button type=\"submit\">Add comment</button>\n      <br />\n      {isSuccess && 'comment Successfully sent'}\n    </form>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if ('serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      registerValidSW(swUrl, config);\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      if (!navigator.serviceWorker.controller) {\r\n        return window.location.reload();\r\n      }\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport {QueryClient, QueryClientProvider} from \"react-query\";\n\nconst client = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={client}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}